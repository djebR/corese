/* Generated By:JavaCC: Do not edit this line. SparqlCoreseConstants.java */
package fr.inria.corese.sparql.triple.javacc1;

public interface SparqlCoreseConstants {

  int EOF = 0;
  int WS = 6;
  int SINGLE_LINE_COMMENT = 7;
  int Q_IRIref = 8;
  int QNAME_NS = 9;
  int QNAME = 10;
  int BLANK_NODE_LABEL = 11;
  int VAR1 = 12;
  int VAR2 = 13;
  int ABASE = 14;
  int APREFIX = 15;
  int ATLIST = 16;
  int ATPATH = 17;
  int LANGTAG = 18;
  int A2Z = 19;
  int A2ZN = 20;
  int KW_A = 21;
  int BASE = 22;
  int PREFIX = 23;
  int SELECT = 24;
  int DESCRIBE = 25;
  int CONSTRUCT = 26;
  int RULE = 27;
  int ASK = 28;
  int TEMPLATE = 29;
  int DISTINCT = 30;
  int SEPARATOR = 31;
  int REDUCED = 32;
  int LIMIT = 33;
  int OFFSET = 34;
  int ORDER = 35;
  int BY = 36;
  int RELAX = 37;
  int ASC = 38;
  int DESC = 39;
  int NAMED = 40;
  int FROM = 41;
  int WHERE = 42;
  int GRAPH = 43;
  int SERVICE = 44;
  int OPTIONAL = 45;
  int UNION = 46;
  int MINUSP = 47;
  int NOT = 48;
  int SCOPE = 49;
  int LET = 50;
  int LETDYN = 51;
  int SET = 52;
  int STATIC = 53;
  int FOR = 54;
  int LOOP = 55;
  int IF = 56;
  int THEN = 57;
  int ELSE = 58;
  int EXIST = 59;
  int FILTER = 60;
  int LOAD = 61;
  int CLEAR = 62;
  int DROP = 63;
  int CREATE = 64;
  int ADD = 65;
  int TO = 66;
  int MOVE = 67;
  int COPY = 68;
  int INSERT = 69;
  int DELETE = 70;
  int WITH = 71;
  int USING = 72;
  int DEFAUT = 73;
  int ALL = 74;
  int INTO = 75;
  int SILENT = 76;
  int DATA = 77;
  int ERROR = 78;
  int RETURN = 79;
  int AGGREGATE = 80;
  int UNNEST = 81;
  int MAP = 82;
  int MAPLIST = 83;
  int MAPFIND = 84;
  int MAPFINDLIST = 85;
  int MAPMERGE = 86;
  int MAPEVERY = 87;
  int MAPANY = 88;
  int FUNCALL = 89;
  int EVAL = 90;
  int METHOD = 91;
  int APPLY = 92;
  int REDUCE = 93;
  int SELF = 94;
  int BOUND = 95;
  int COALESCE = 96;
  int SAMETERM = 97;
  int STR = 98;
  int STRDT = 99;
  int STRLANG = 100;
  int BNODE = 101;
  int URI = 102;
  int IRI = 103;
  int UUID = 104;
  int STRUUID = 105;
  int DTYPE = 106;
  int LANG = 107;
  int LANGMATCHES = 108;
  int CONTAINS = 109;
  int STRSTARTS = 110;
  int STRENDS = 111;
  int STRLEN = 112;
  int SUBSTR = 113;
  int UCASE = 114;
  int LCASE = 115;
  int STRBEFORE = 116;
  int STRAFTER = 117;
  int ENCODE_FOR_URI = 118;
  int CONCAT = 119;
  int REPLACE = 120;
  int IS_URI = 121;
  int IS_IRI = 122;
  int IS_BLANK = 123;
  int IS_LITERAL = 124;
  int IS_NUMERIC = 125;
  int IS_EXTENSION = 126;
  int IS_SAFE = 127;
  int IS_UNDEFINED = 128;
  int IS_WELLFORMED = 129;
  int REGEX = 130;
  int RAND = 131;
  int ROUND = 132;
  int FLOOR = 133;
  int CEIL = 134;
  int POWER = 135;
  int ABS = 136;
  int NOW = 137;
  int YEAR = 138;
  int MONTH = 139;
  int DAY = 140;
  int HOURS = 141;
  int MINUTES = 142;
  int SECONDS = 143;
  int TIMEZONE = 144;
  int TZ = 145;
  int MD5 = 146;
  int SHA1 = 147;
  int SHA256 = 148;
  int SHA384 = 149;
  int SHA512 = 150;
  int GROUP_CONCAT = 151;
  int SUM = 152;
  int SAMPLE = 153;
  int AVG = 154;
  int MIN = 155;
  int MAX = 156;
  int TRUE = 157;
  int FALSE = 158;
  int S_MORE = 159;
  int PRAGMA = 160;
  int GROUP = 161;
  int FORMAT = 162;
  int BOX = 163;
  int IBOX = 164;
  int SBOX = 165;
  int HAVING = 166;
  int VALUES = 167;
  int BIND = 168;
  int UNDEF = 169;
  int COUNT = 170;
  int SCORE = 171;
  int AS = 172;
  int SORTED = 173;
  int ALL2 = 174;
  int CURRENT = 175;
  int DIRECT2 = 176;
  int COLON2 = 177;
  int DEBUG = 178;
  int CHECK = 179;
  int NOSORT = 180;
  int TUPLE = 181;
  int TRIPLE = 182;
  int XPATH = 183;
  int FUNCTION = 184;
  int LAMBDA = 185;
  int QUERY = 186;
  int PACKAGE = 187;
  int IN = 188;
  int EQ2 = 189;
  int NE2 = 190;
  int BEGIN_WITH = 191;
  int STRICT_SPEC = 192;
  int SPEC = 193;
  int SAME = 194;
  int GENERALISATION = 195;
  int STRICT_GENERALISATION = 196;
  int EQ_LANG = 197;
  int INTEGER = 198;
  int DECIMAL = 199;
  int DOUBLE = 200;
  int EXPONENT = 201;
  int QUOTE_3D = 202;
  int QUOTE_3S = 203;
  int ECHAR = 204;
  int STRING_LITERAL1 = 205;
  int STRING_LITERAL2 = 206;
  int STRING_LITERAL_LONG1 = 207;
  int STRING_LITERAL_LONG2 = 208;
  int DIGITS = 209;
  int HEX = 210;
  int LPAREN = 211;
  int RPAREN = 212;
  int LBRACE = 213;
  int RBRACE = 214;
  int LBRACKET = 215;
  int RBRACKET = 216;
  int ANON = 217;
  int SEMICOLON = 218;
  int COMMA = 219;
  int DOT = 220;
  int EQ = 221;
  int NE = 222;
  int GT = 223;
  int LT = 224;
  int LE = 225;
  int GE = 226;
  int BANG = 227;
  int TILDE = 228;
  int COLON = 229;
  int SC_OR = 230;
  int SC_AND = 231;
  int PLUS = 232;
  int MINUS = 233;
  int STAR = 234;
  int SLASH = 235;
  int QM = 236;
  int BAR = 237;
  int DATATYPE = 238;
  int AT = 239;
  int VAR3 = 240;
  int NCCHAR1p = 241;
  int NCCHAR1 = 242;
  int NCCHAR = 243;
  int NCNAME_PREFIX = 244;
  int NCNAME = 245;
  int BLANKNAME = 246;
  int VARNAME = 247;
  int LOCAL_ESC = 248;
  int PERCENT = 249;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<WS>",
    "<SINGLE_LINE_COMMENT>",
    "<Q_IRIref>",
    "<QNAME_NS>",
    "<QNAME>",
    "<BLANK_NODE_LABEL>",
    "<VAR1>",
    "<VAR2>",
    "\"@base\"",
    "\"@prefix\"",
    "\"@list\"",
    "\"@path\"",
    "<LANGTAG>",
    "<A2Z>",
    "<A2ZN>",
    "\"a\"",
    "\"base\"",
    "\"prefix\"",
    "\"select\"",
    "\"describe\"",
    "\"construct\"",
    "\"rule\"",
    "\"ask\"",
    "\"template\"",
    "\"distinct\"",
    "\"separator\"",
    "\"reduced\"",
    "\"limit\"",
    "\"offset\"",
    "\"order\"",
    "\"by\"",
    "\"relax\"",
    "\"asc\"",
    "\"desc\"",
    "\"named\"",
    "\"from\"",
    "\"where\"",
    "\"graph\"",
    "\"service\"",
    "\"optional\"",
    "\"union\"",
    "\"minus\"",
    "\"not\"",
    "\"scope\"",
    "\"let\"",
    "\"letdyn\"",
    "\"set\"",
    "\"static\"",
    "\"for\"",
    "\"loop\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"exists\"",
    "\"filter\"",
    "\"load\"",
    "\"clear\"",
    "\"drop\"",
    "\"create\"",
    "\"add\"",
    "\"to\"",
    "\"move\"",
    "\"copy\"",
    "\"insert\"",
    "\"delete\"",
    "\"with\"",
    "\"using\"",
    "\"default\"",
    "\"all\"",
    "\"into\"",
    "\"silent\"",
    "\"data\"",
    "\"error\"",
    "\"return\"",
    "\"aggregate\"",
    "\"unnest\"",
    "\"map\"",
    "\"maplist\"",
    "\"mapfind\"",
    "\"mapfindlist\"",
    "\"mapmerge\"",
    "\"mapevery\"",
    "\"mapany\"",
    "\"funcall\"",
    "\"eval\"",
    "\"method\"",
    "\"apply\"",
    "\"reduce\"",
    "\"self\"",
    "\"bound\"",
    "\"coalesce\"",
    "\"sameTerm\"",
    "\"str\"",
    "\"strdt\"",
    "\"strlang\"",
    "\"bnode\"",
    "\"uri\"",
    "\"iri\"",
    "\"uuid\"",
    "\"struuid\"",
    "\"datatype\"",
    "\"lang\"",
    "\"langmatches\"",
    "\"contains\"",
    "\"strstarts\"",
    "\"strends\"",
    "\"strlen\"",
    "\"substr\"",
    "\"ucase\"",
    "\"lcase\"",
    "\"strbefore\"",
    "\"strafter\"",
    "\"encode_for_uri\"",
    "\"concat\"",
    "\"replace\"",
    "\"isURI\"",
    "\"isIRI\"",
    "\"isBlank\"",
    "\"isLiteral\"",
    "\"isNumeric\"",
    "\"isExtension\"",
    "\"safe\"",
    "\"isUndefined\"",
    "\"isWellFormed\"",
    "\"regex\"",
    "\"rand\"",
    "\"round\"",
    "\"floor\"",
    "\"ceil\"",
    "\"power\"",
    "\"abs\"",
    "\"now\"",
    "\"year\"",
    "\"month\"",
    "\"day\"",
    "\"hours\"",
    "\"minutes\"",
    "\"seconds\"",
    "\"timezone\"",
    "\"tz\"",
    "\"md5\"",
    "\"sha1\"",
    "\"sha256\"",
    "\"sha384\"",
    "\"sha512\"",
    "\"group_concat\"",
    "\"sum\"",
    "\"sample\"",
    "\"avg\"",
    "\"min\"",
    "\"max\"",
    "\"true\"",
    "\"false\"",
    "\"more\"",
    "\"pragma\"",
    "\"group\"",
    "\"format\"",
    "\"box\"",
    "\"ibox\"",
    "\"sbox\"",
    "\"having\"",
    "\"values\"",
    "\"bind\"",
    "\"undef\"",
    "\"count\"",
    "\"score\"",
    "\"as\"",
    "\"sorted\"",
    "\"all::\"",
    "\"current::\"",
    "\"direct::\"",
    "\"::\"",
    "\"debug\"",
    "\"check\"",
    "\"nosort\"",
    "\"tuple\"",
    "\"triple\"",
    "\"xpath\"",
    "\"function\"",
    "\"lambda\"",
    "\"query\"",
    "\"package\"",
    "\"in\"",
    "\"==\"",
    "\"!==\"",
    "\"^\"",
    "\"<:\"",
    "\"<=:\"",
    "\"=:\"",
    "\">=:\"",
    "\">:\"",
    "\"~=\"",
    "<INTEGER>",
    "<DECIMAL>",
    "<DOUBLE>",
    "<EXPONENT>",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "<ECHAR>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERAL_LONG1>",
    "<STRING_LITERAL_LONG2>",
    "<DIGITS>",
    "<HEX>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<ANON>",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"!\"",
    "\"~\"",
    "\":\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"?\"",
    "\"|\"",
    "\"^^\"",
    "\"@\"",
    "<VAR3>",
    "<NCCHAR1p>",
    "<NCCHAR1>",
    "<NCCHAR>",
    "<NCNAME_PREFIX>",
    "<NCNAME>",
    "<BLANKNAME>",
    "<VARNAME>",
    "<LOCAL_ESC>",
    "<PERCENT>",
  };

}
