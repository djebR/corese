package fr.inria.corese.core.extension;

import fr.inria.corese.sparql.api.IDatatype;
import fr.inria.corese.sparql.datatype.DatatypeMap;
import fr.inria.corese.sparql.triple.function.extension.*;


/**
 * Code generated by LDScript Java compiler for SPARQL extension functions 
 * new JavaCompiler("SHACL").compile("http://ns.inria.fr/sparql-template/function/datashape/main.rq") 
 * function called with: 
 * prefix java: <function://fr.inria.corese.core.extension.SHACL> 
 * java:sh_shacl() 
 *
 * Olivier Corby - Wimmics Inria I3S - Wed Oct 30 22:07:39 CET 2019 
 */
public class Calendar extends Core { 

static final IDatatype _cst_0 = DatatypeMap.newInstance("Sunday");
static final IDatatype _cst_1 = DatatypeMap.newInstance("Monday");
static final IDatatype _cst_2 = DatatypeMap.newInstance("Tuesday");
static final IDatatype _cst_3 = DatatypeMap.newInstance("Wednesday");
static final IDatatype _cst_4 = DatatypeMap.newInstance("Thursday");
static final IDatatype _cst_5 = DatatypeMap.newInstance("Friday");
static final IDatatype _cst_6 = DatatypeMap.newInstance("Saturday");
static final IDatatype _cst_7 = DatatypeMap.newInstance("Unknown");
static final IDatatype _cst_8 = DatatypeMap.newInstance("Dimanche");
static final IDatatype _cst_9 = DatatypeMap.newInstance("Lundi");
static final IDatatype _cst_10 = DatatypeMap.newInstance("Mardi");
static final IDatatype _cst_11 = DatatypeMap.newInstance("Mercredi");
static final IDatatype _cst_12 = DatatypeMap.newInstance("Jeudi");
static final IDatatype _cst_13 = DatatypeMap.newInstance("Vendredi");
static final IDatatype _cst_14 = DatatypeMap.newInstance("Samedi");
static final IDatatype _cst_15 = DatatypeMap.newInstance("Inconnu");
static final IDatatype _cst_16 = DatatypeMap.newResource("http://www.w3.org/2001/XMLSchema#integer");

public IDatatype cal_en(IDatatype n) {
  if (n.eq(DatatypeMap.ZERO).booleanValue()) {
    return _cst_0;
  }
  else if (n.eq(DatatypeMap.ONE).booleanValue()) {
    return _cst_1;
  }
  else if (n.eq(DatatypeMap.TWO).booleanValue()) {
    return _cst_2;
  }
  else if (n.eq(DatatypeMap.THREE).booleanValue()) {
    return _cst_3;
  }
  else if (n.eq(DatatypeMap.FOUR).booleanValue()) {
    return _cst_4;
  }
  else if (n.eq(DatatypeMap.FIVE).booleanValue()) {
    return _cst_5;
  }
  else if (n.eq(DatatypeMap.SIX).booleanValue()) {
    return _cst_6;
  }
  else {
    return _cst_7;
  }
}

public IDatatype cal_fr(IDatatype n) {
  if (n.eq(DatatypeMap.ZERO).booleanValue()) {
    return _cst_8;
  }
  else if (n.eq(DatatypeMap.ONE).booleanValue()) {
    return _cst_9;
  }
  else if (n.eq(DatatypeMap.TWO).booleanValue()) {
    return _cst_10;
  }
  else if (n.eq(DatatypeMap.THREE).booleanValue()) {
    return _cst_11;
  }
  else if (n.eq(DatatypeMap.FOUR).booleanValue()) {
    return _cst_12;
  }
  else if (n.eq(DatatypeMap.FIVE).booleanValue()) {
    return _cst_13;
  }
  else if (n.eq(DatatypeMap.SIX).booleanValue()) {
    return _cst_14;
  }
  else {
    return _cst_15;
  }
}

public IDatatype xt_day(IDatatype dt) {
  return cal_day(dt);
}

public IDatatype cal_day(IDatatype dt) {
  return cal_en(cal_find(dt));
}

public IDatatype cal_ab(IDatatype y) {
  return cal_div(y, DatatypeMap.newInteger(100));
}

public IDatatype cal_cd(IDatatype y) {
  return cal_mod(y, DatatypeMap.newInteger(100));
}

public IDatatype cal_jour(IDatatype dt) {
  return cal_fr(cal_find(dt));
}

public IDatatype cal_k(IDatatype y) {
  return cal_div(cal_cd(y), DatatypeMap.FOUR);
}

public IDatatype xt_jour(IDatatype dt) {
  return cal_jour(dt);
}

public IDatatype cal_bisextile(IDatatype y) {
  return and(cal_mod(y, DatatypeMap.FOUR).eq(DatatypeMap.ZERO), or(cal_mod(y, DatatypeMap.newInteger(100)).neq(DatatypeMap.ZERO), cal_mod(y, DatatypeMap.newInteger(400)).eq(DatatypeMap.ZERO)));
}

public IDatatype cal_find(IDatatype dt) {
  return cal_get(year(dt), month(dt), day(dt));
}

public IDatatype cal_q(IDatatype y) {
  return cal_div(cal_ab(y), DatatypeMap.FOUR);
}

public IDatatype cal_num(IDatatype dtay) {
  if (in(dtay, DatatypeMap.newList(_cst_9, _cst_1)).booleanValue()) {
    return DatatypeMap.ONE;
  }
  else if (in(dtay, DatatypeMap.newList(_cst_10, _cst_2)).booleanValue()) {
    return DatatypeMap.TWO;
  }
  else if (in(dtay, DatatypeMap.newList(_cst_11, _cst_3)).booleanValue()) {
    return DatatypeMap.THREE;
  }
  else if (in(dtay, DatatypeMap.newList(_cst_12, _cst_4)).booleanValue()) {
    return DatatypeMap.FOUR;
  }
  else if (in(dtay, DatatypeMap.newList(_cst_13, _cst_5)).booleanValue()) {
    return DatatypeMap.FIVE;
  }
  else if (in(dtay, DatatypeMap.newList(_cst_14, _cst_6)).booleanValue()) {
    return DatatypeMap.SIX;
  }
  else if (in(dtay, DatatypeMap.newList(_cst_8, _cst_0)).booleanValue()) {
    return DatatypeMap.SEVEN;
  }
  else {
    return DatatypeMap.ZERO;
  }
}

public IDatatype cal_monthday(IDatatype m, IDatatype y) {
  if (m.le(DatatypeMap.TWO).booleanValue()) {
    if (cal_bisextile(y).booleanValue()) {
      if (m.eq(DatatypeMap.ONE).booleanValue()) {
        return DatatypeMap.THREE;
      }
      else {
        return DatatypeMap.SIX;
      }
    }
    else if (m.eq(DatatypeMap.ONE).booleanValue()) {
      return DatatypeMap.FOUR;
    }
    else {
      return DatatypeMap.ZERO;
    }
  }
  else if (in(m, DatatypeMap.newList(DatatypeMap.THREE, DatatypeMap.newInteger(11))).booleanValue()) {
    return DatatypeMap.ZERO;
  }
  else if (in(m, DatatypeMap.newList(DatatypeMap.SIX)).booleanValue()) {
    return DatatypeMap.ONE;
  }
  else if (in(m, DatatypeMap.newList(DatatypeMap.NINE, DatatypeMap.newInteger(12))).booleanValue()) {
    return DatatypeMap.TWO;
  }
  else if (in(m, DatatypeMap.newList(DatatypeMap.FOUR, DatatypeMap.SEVEN)).booleanValue()) {
    return DatatypeMap.THREE;
  }
  else if (in(m, DatatypeMap.newList(DatatypeMap.newInteger(10))).booleanValue()) {
    return DatatypeMap.FOUR;
  }
  else if (in(m, DatatypeMap.newList(DatatypeMap.FIVE)).booleanValue()) {
    return DatatypeMap.FIVE;
  }
  else {
    return DatatypeMap.SIX;
  }
}

public IDatatype cal_mod(IDatatype aa, IDatatype bb) {
  return aa.minus(bb.mult(cal_div(aa, bb))).cast(_cst_16);
}

public IDatatype cal_div(IDatatype aa, IDatatype bb) {
  return floor(aa.div(bb)).cast(_cst_16);
}

public IDatatype cal_days(IDatatype y, IDatatype m) {
  IDatatype list = DatatypeMap.newList(DatatypeMap.newInteger(31), DatatypeMap.newInteger(28), DatatypeMap.newInteger(31), DatatypeMap.newInteger(30), DatatypeMap.newInteger(31), DatatypeMap.newInteger(30), DatatypeMap.newInteger(31), DatatypeMap.newInteger(31), DatatypeMap.newInteger(30), DatatypeMap.newInteger(31), DatatypeMap.newInteger(30), DatatypeMap.newInteger(31));
  if (m.neq(DatatypeMap.TWO).booleanValue()) {
    return Get.get(list, m.minus(DatatypeMap.ONE));
  }
  else if (cal_bisextile(y).booleanValue()) {
    return DatatypeMap.newInteger(29);
  }
  else {
    return DatatypeMap.newInteger(28);
  }
}

public IDatatype cal_get(IDatatype y, IDatatype m, IDatatype dt) {
  IDatatype n = cal_k(y).plus(cal_q(y)).plus(cal_cd(y)).plus(cal_monthday(m, y)).plus(dt).plus(DatatypeMap.TWO).plus(DatatypeMap.FIVE.mult(cal_ab(y)));
  return cal_mod(n, DatatypeMap.SEVEN);
}

}
