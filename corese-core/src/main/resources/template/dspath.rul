<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Fri Oct 11 09:39:41 CEST 2019
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns='http://ns.inria.fr/sparql-template/'>
<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:pattern (?shape, ?sh, ?vis, ?s, ?p, ?exp, ?o) {
  sh:safe(?shape, ?sh, ?suc)
}
where {
  graph ?shape {  
    ?sh sh:pattern ?exp   
    optional { ?sh sh:flags ?flag }
  }
  values ?o { unnest(sh:path(?shape, ?s, ?p)) }
  bind ( 
    coalesce(
        ! isBlank(?o) && 
        if (bound (?flag), regex(?o, ?exp, ?flag), regex(?o, ?exp)), 
        false) 
  as ?suc )

  bind (st:report(sh:pattern, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# SPARQL Based Constraint
# Evaluate SPARQL query with pre-bind of variable $this with focus nodes
# SPARQL query returns solutions that fail the Constraint
#
prefix sh: <http://www.w3.org/ns/shacl#> 
template sh:sparqlvalidp (?shape, ?sh, ?vis, ?s, ?p, ?oper, ?obj, ?o) {
   sh:safe(?shape, ?sh, ?suc)
}
where {

    graph ?shape {  
        ?cst sh:parameter [ sh:path ?oper ] ;
             sh:propertyValidator ?valid 
        ?valid sh:select ?q 
            
        filter not exists { ?cst sh:deactivated true }
        
        # collect prefix definitions
        # TBD: do it once and record it
        {
            select ?valid 
              (group_concat(concat("prefix ", ?pr, ": <", str(?ns), ">") ;  separator="\n") 
              as ?define) 
            where {
                ?valid sh:prefixes ?ns
                [] sh:declare [ sh:prefix ?pr ; sh:namespace ?ns ] 
            }
            group by ?valid
        }
    }
          
    bind (
        concat(?define, replace(?q, "\\$PATH", sh:display(?shape, ?p)), sh:values(sh:variable(?oper)))
    as ?qq)
    
    #filter xt:display(?qq)  
        
    values ($this ?value) { 
        unnest(kg:sparql(?qq, "$this", ?s, sh:variable(?oper), ?obj)) 
    }

    # SPARQL query returns solutions that fail
    bind (false as ?suc)
    
    bind (st:report(sh:sparql, ?cst, ?shape, ?s, ?p, ?value, ?suc, ?vis) as ?b)
    
}

function sh:display(?shape, ?p) {
    if (isURI(?p), st:turtle(?p), st:apply-templates-with-graph(st:dspprint, ?shape, ?p))
}

function sh:variable(?uri) {
    concat("?", xt:strip(?uri))
}

# pseudo declare variables in case they are not in a triple of query ?q
function sh:values(?oper){
    concat("values (?this ", ?oper, ") { (UNDEF UNDEF) }")
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:lessThanOrEquals(?shape, ?sh, ?vis, ?s, ?p, ?q, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  ?s ?p ?o ; ?q ?v
  
  bind (coalesce(?o <= ?v, false) as ?suc)
    
  bind (st:report(sh:lessThanOrEquals, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
  
}
 
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# SPARQL Based Constraint
# Evaluate SPARQL query with pre-bind of variable $this with focus nodes
# SPARQL query returns solutions that fail the Constraint
#
prefix sh: <http://www.w3.org/ns/shacl#> 
template  sh:sparql (?shape, ?sh, ?vis, ?s, ?p, ?cst, ?o) {
   sh:safe(?shape, ?sh, ?suc)
}
where {
    graph ?shape {  
        ?sh sh:sparql ?cst 
        ?cst sh:select ?q
        filter not exists { ?cst sh:deactivated true }
        optional { ?cst sh:message ?mes }
        
        # collect prefix definitions
        # TBD: do it once and record it
        {
            select ?cst 
              (group_concat(concat("prefix ", ?pr, ": <", str(?ns), ">") ;  separator="\n") 
              as ?define) 
            where {
                ?cst sh:prefixes/owl:imports*/sh:declare [ sh:prefix ?pr ; sh:namespace ?ns ] 
            }
            group by ?cst
        }
    }
    
    bind (sh:path(?shape, ?s, ?p) as ?list)
    
    values ?o { unnest(?list) } 
    
    bind (sh:mysparql(concat(?define, ?q), ?sh, ?cst, ?shape, ?s, ?o, ?vis, coalesce(?mes, st:null), bound(?mes)) as ?suc)
    
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:hasValue (?shape, ?sh, ?vis, ?s, ?p, ?v, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  bind ( exists {
    values ?o { unnest(sh:path(?shape, ?s, ?p)) }
    filter coalesce(?o = ?v, false) }
  as ?suc)
  
  
  bind (st:report(sh:hasValue, ?sh, ?shape, ?s, ?p, ?v, ?suc, ?vis) as ?b)
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:uniqueLang (?shape, ?sh, ?vis, ?s, ?p, ?l, ?o){
    let (?suc = false, ?b = st:report(sh:uniqueLang, ?sh, ?shape, ?s, ?p, ?lang, ?suc, ?vis)){
        sh:safe(?shape, ?sh, ?suc)
    } 
}
where {

    select ?shape ?s ?p ?lang (count(?val) as ?c)  
    where {
        values ?val { unnest(sh:path(?shape, ?s, ?p)) }
        bind (lang(?val) as ?lang)
        filter (bound(?lang) && ?lang != "")
    } 
    group by ?lang
    having (?c > 1)
    
}


]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:lessThan(?shape, ?sh, ?vis, ?s, ?p, ?q, ?o){
  sh:safe(?shape, ?sh, ?suc)
}
where {

  ?s ?p ?o ; ?q ?v
  
  bind (coalesce(?o < ?v, false) as ?suc)
    
  bind (st:report(sh:lessThan, ?sh, ?shape, ?s, ?p, ?o, ?suc, ?vis) as ?b)
  
}
 
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh:  <http://www.w3.org/ns/shacl#> 
prefix msh: <http://ns.inria.fr/shacl/>

@import <function/datashape/main.rq>   <function/datashape/path.rq> 

template st:profile {}
where {}

function st:aggregate(out) {
  st:agg_and(out)
}

function st:default(term){
    true
}

function st:defaultNamed(term){
    true
}

function st:optimize(shape, sh){
    true
}
















]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# ?ns sh:property ?sh 
# ?sh sh:path ?p ;
#     sh:qualifiedValueShape ?qsh
# ?s subject for path ?p
# compute subList of values of path ?s ?p that match qualifiedValueShape ?qsh
# subList size must match min and max
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template sh:qualifiedValueShape (?shape, ?sh, ?vis, ?s, ?p, ?qsh, ?value) {
  sh:safe(?shape, ?sh, ?suc1 && ?suc2)
}
where {
    graph ?shape {  
        ?ns sh:property ?sh 
        ?sh sh:qualifiedValueShape ?qsh
        optional { ?sh sh:qualifiedMinCount ?min }
        optional { ?sh sh:qualifiedMaxCount ?max }
        optional { ?sh sh:qualifiedValueShapesDisjoint ?disjoint }
    }
                
  
  bind (sh:qualified(?shape, ?qsh, ?s, ?p) as ?list)
  
      
  # test disjointness with sibling shapes
  bind (
    if (coalesce(?disjoint, false), 
        # remove elements that are in sibling shapes
        mapfindlist(sh:disjoint, ?list, xt:list(?shape), ?qsh, ?s),
        ?list)
    as ?qlist)
    
    
  bind (xt:size(?qlist) >= coalesce(?min, 0) as ?suc1) 
  bind (xt:size(?qlist) <= coalesce(?max, xt:size(?qlist)) as ?suc2) 

  bind (st:report(sh:qualifiedMinCount, ?sh, ?shape, ?s, ?p, ?s, ?suc1, ?vis) as ?b1)
  bind (st:report(sh:qualifiedMaxCount, ?sh, ?shape, ?s, ?p, ?s, ?suc2, ?vis) as ?b2)
  
}

#
# test disjointness of subject ?s value ?o with ?qsh sibling shapes
# for each sibling shape ?sh, compute ?list of values and test ?o not in ?list
#
function sh:disjoint(?o, ?shape, ?qsh, ?s){
   for ((?sh, ?path) in st:cget(sh:sibling, ?qsh)){
        if (xt:member(?o, sh:qualified(?shape, ?sh, ?s, ?path))){
            return (false)
        }        
   } ;
   return (true)
}

#
# Return the list of value nodes that match qualified shape ?qsh 
#
function sh:qualified(?shape, ?qsh, ?s, ?p){
     let (?list = sh:path(?shape, ?s, ?p)) {
        mapfindlist(sh:qualifiedShape, ?list, xt:list(?shape), ?qsh)
     }
}

]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls, ?p, ?o) {
  if (bound(?o), 
    st:call-template(sh:sparqlvalidp, ?shape, ?sh, ?vis, ?s, ?p, ?oper, ?value, ?o),
    st:call-template(sh:sparqlvalidp, ?shape, ?sh, ?vis, ?s, ?p, ?oper, ?value))
}
where {
  graph ?shape {  
    ?sh ?oper ?value    
    filter (! sh:isPredicate(?oper))
  }
  
  values ?o { UNDEF }
  values ?s { unnest(?ls) }

}

function sh:isPredicate(?p) {
    strstarts(?p, sh:)
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# [] a sh:NodeShape ; sh:property ?sh . 
# ?sh sh:path ?p ; ?q ?m .
# ?ls = list of subjects of path ?p
#
# ?value may be bound in the boolean cases:
# ?sh sh:path ?p ; sh:or ([sh:class C1][sh:class C2])
#
# template sh:or enumerate objects of path and 
# for each object ?value : check the or 
# the or evaluates its elements by coming back here with ?value bound
# this is done to use the same templates whether ?value is bound or not
#
prefix sh: <http://www.w3.org/ns/shacl#> 

template (?shape, ?sh, ?vis, ?ls, ?p, ?value) {
  sh:generic(?shape, ?sh, ?vis, ?ls, ?p, if (?bound, ?value, st:null), ?bound)
}
where {
    bind (bound(?value) as ?bound)
}

























]]>
</body>
</rule>

</rdf:RDF>
